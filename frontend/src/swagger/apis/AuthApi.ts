/* tslint:disable */
/* eslint-disable */
/**
 * Distance Challenge API
 * Distance Challenge API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GithubComSerbrodaDistanceChallengeHandlersLoginRequest,
    GithubComSerbrodaDistanceChallengeHandlersLoginRequestFromJSON,
    GithubComSerbrodaDistanceChallengeHandlersLoginRequestToJSON,
    GithubComSerbrodaDistanceChallengeHandlersRegistrationRequest,
    GithubComSerbrodaDistanceChallengeHandlersRegistrationRequestFromJSON,
    GithubComSerbrodaDistanceChallengeHandlersRegistrationRequestToJSON,
    GithubComSerbrodaDistanceChallengeModelsUser,
    GithubComSerbrodaDistanceChallengeModelsUserFromJSON,
    GithubComSerbrodaDistanceChallengeModelsUserToJSON,
    GithubComSerbrodaDistanceChallengeSecurityTokenPair,
    GithubComSerbrodaDistanceChallengeSecurityTokenPairFromJSON,
    GithubComSerbrodaDistanceChallengeSecurityTokenPairToJSON,
} from '../models';

export interface LoginRequest {
    login: GithubComSerbrodaDistanceChallengeHandlersLoginRequest;
}

export interface RegisterRequest {
    login: GithubComSerbrodaDistanceChallengeHandlersRegistrationRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * login to an account
     * Login
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GithubComSerbrodaDistanceChallengeSecurityTokenPair>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubComSerbrodaDistanceChallengeHandlersLoginRequestToJSON(requestParameters.login),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubComSerbrodaDistanceChallengeSecurityTokenPairFromJSON(jsonValue));
    }

    /**
     * login to an account
     * Login
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit): Promise<GithubComSerbrodaDistanceChallengeSecurityTokenPair> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * register a new account
     * Register
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GithubComSerbrodaDistanceChallengeModelsUser>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling register.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubComSerbrodaDistanceChallengeHandlersRegistrationRequestToJSON(requestParameters.login),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubComSerbrodaDistanceChallengeModelsUserFromJSON(jsonValue));
    }

    /**
     * register a new account
     * Register
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit): Promise<GithubComSerbrodaDistanceChallengeModelsUser> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
