/* tslint:disable */
/* eslint-disable */
/**
 * Echo Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AppHandlersLoginRequest,
    AppHandlersLoginRequestFromJSON,
    AppHandlersLoginRequestToJSON,
    AppHandlersRegistrationRequest,
    AppHandlersRegistrationRequestFromJSON,
    AppHandlersRegistrationRequestToJSON,
    GithubComSerbrodaDistanceChallengeModelsUser,
    GithubComSerbrodaDistanceChallengeModelsUserFromJSON,
    GithubComSerbrodaDistanceChallengeModelsUserToJSON,
    GithubComSerbrodaDistanceChallengeSecurityTokenPair,
    GithubComSerbrodaDistanceChallengeSecurityTokenPairFromJSON,
    GithubComSerbrodaDistanceChallengeSecurityTokenPairToJSON,
} from '../models';

export interface AuthLoginPostRequest {
    login: AppHandlersLoginRequest;
}

export interface AuthRegisterPostRequest {
    login: AppHandlersRegistrationRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async authLoginPostRaw(requestParameters: AuthLoginPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GithubComSerbrodaDistanceChallengeSecurityTokenPair>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling authLoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppHandlersLoginRequestToJSON(requestParameters.login),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubComSerbrodaDistanceChallengeSecurityTokenPairFromJSON(jsonValue));
    }

    /**
     */
    async authLoginPost(requestParameters: AuthLoginPostRequest, initOverrides?: RequestInit): Promise<GithubComSerbrodaDistanceChallengeSecurityTokenPair> {
        const response = await this.authLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authRegisterPostRaw(requestParameters: AuthRegisterPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GithubComSerbrodaDistanceChallengeModelsUser>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling authRegisterPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppHandlersRegistrationRequestToJSON(requestParameters.login),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubComSerbrodaDistanceChallengeModelsUserFromJSON(jsonValue));
    }

    /**
     */
    async authRegisterPost(requestParameters: AuthRegisterPostRequest, initOverrides?: RequestInit): Promise<GithubComSerbrodaDistanceChallengeModelsUser> {
        const response = await this.authRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
