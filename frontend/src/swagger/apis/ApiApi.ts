/* tslint:disable */
/* eslint-disable */
/**
 * Distance Challenge API
 * Distance Challenge API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GithubComSerbrodaDistanceChallengeModelsRun,
    GithubComSerbrodaDistanceChallengeModelsRunFromJSON,
    GithubComSerbrodaDistanceChallengeModelsRunToJSON,
    GithubComSerbrodaDistanceChallengeModelsUser,
    GithubComSerbrodaDistanceChallengeModelsUserFromJSON,
    GithubComSerbrodaDistanceChallengeModelsUserToJSON,
} from '../models';

export interface ActivateUserRequest {
    userId: string;
    user: GithubComSerbrodaDistanceChallengeModelsUser;
}

export interface CreateRunRequest {
    id: string;
    user: GithubComSerbrodaDistanceChallengeModelsRun;
}

export interface DeleteRunRequest {
    id: string;
}

export interface GetRunRequest {
    id: string;
}

export interface GetUserRequest {
    userId: string;
}

export interface UpdateRunRequest {
    id: string;
    user: GithubComSerbrodaDistanceChallengeModelsRun;
}

export interface UpdateUserRequest {
    userId: string;
    user: GithubComSerbrodaDistanceChallengeModelsUser;
}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     * activate a specific user
     * Activates a user
     */
    async activateUserRaw(requestParameters: ActivateUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GithubComSerbrodaDistanceChallengeModelsUser>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling activateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling activateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{userId}/activate`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GithubComSerbrodaDistanceChallengeModelsUserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubComSerbrodaDistanceChallengeModelsUserFromJSON(jsonValue));
    }

    /**
     * activate a specific user
     * Activates a user
     */
    async activateUser(requestParameters: ActivateUserRequest, initOverrides?: RequestInit): Promise<GithubComSerbrodaDistanceChallengeModelsUser> {
        const response = await this.activateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a new run
     * Create a run
     */
    async createRunRaw(requestParameters: CreateRunRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<GithubComSerbrodaDistanceChallengeModelsRun>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createRun.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createRun.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{id}/runs`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubComSerbrodaDistanceChallengeModelsRunToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GithubComSerbrodaDistanceChallengeModelsRunFromJSON));
    }

    /**
     * create a new run
     * Create a run
     */
    async createRun(requestParameters: CreateRunRequest, initOverrides?: RequestInit): Promise<Array<GithubComSerbrodaDistanceChallengeModelsRun>> {
        const response = await this.createRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a specific run
     * Delete a run
     */
    async deleteRunRaw(requestParameters: DeleteRunRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRun.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/runs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete a specific run
     * Delete a run
     */
    async deleteRun(requestParameters: DeleteRunRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteRunRaw(requestParameters, initOverrides);
    }

    /**
     * get me information
     * Show self
     */
    async getMeRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<GithubComSerbrodaDistanceChallengeModelsUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubComSerbrodaDistanceChallengeModelsUserFromJSON(jsonValue));
    }

    /**
     * get me information
     * Show self
     */
    async getMe(initOverrides?: RequestInit): Promise<GithubComSerbrodaDistanceChallengeModelsUser> {
        const response = await this.getMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * get a specific run
     * Get a run
     */
    async getRunRaw(requestParameters: GetRunRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GithubComSerbrodaDistanceChallengeModelsRun>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRun.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/runs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubComSerbrodaDistanceChallengeModelsRunFromJSON(jsonValue));
    }

    /**
     * get a specific run
     * Get a run
     */
    async getRun(requestParameters: GetRunRequest, initOverrides?: RequestInit): Promise<GithubComSerbrodaDistanceChallengeModelsRun> {
        const response = await this.getRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all runs
     * List runs
     */
    async getRunsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<GithubComSerbrodaDistanceChallengeModelsRun>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/runs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GithubComSerbrodaDistanceChallengeModelsRunFromJSON));
    }

    /**
     * list all runs
     * List runs
     */
    async getRuns(initOverrides?: RequestInit): Promise<Array<GithubComSerbrodaDistanceChallengeModelsRun>> {
        const response = await this.getRunsRaw(initOverrides);
        return await response.value();
    }

    /**
     * get information of a specific user
     * Get user
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GithubComSerbrodaDistanceChallengeModelsUser>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubComSerbrodaDistanceChallengeModelsUserFromJSON(jsonValue));
    }

    /**
     * get information of a specific user
     * Get user
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit): Promise<GithubComSerbrodaDistanceChallengeModelsUser> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get list of all users
     * List users
     */
    async getUsersRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<GithubComSerbrodaDistanceChallengeModelsUser>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GithubComSerbrodaDistanceChallengeModelsUserFromJSON));
    }

    /**
     * get list of all users
     * List users
     */
    async getUsers(initOverrides?: RequestInit): Promise<Array<GithubComSerbrodaDistanceChallengeModelsUser>> {
        const response = await this.getUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * update a specific run
     * Update a run
     */
    async updateRunRaw(requestParameters: UpdateRunRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GithubComSerbrodaDistanceChallengeModelsRun>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRun.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateRun.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/runs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GithubComSerbrodaDistanceChallengeModelsRunToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubComSerbrodaDistanceChallengeModelsRunFromJSON(jsonValue));
    }

    /**
     * update a specific run
     * Update a run
     */
    async updateRun(requestParameters: UpdateRunRequest, initOverrides?: RequestInit): Promise<GithubComSerbrodaDistanceChallengeModelsRun> {
        const response = await this.updateRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update a user
     * Update a user
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GithubComSerbrodaDistanceChallengeModelsUser>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GithubComSerbrodaDistanceChallengeModelsUserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubComSerbrodaDistanceChallengeModelsUserFromJSON(jsonValue));
    }

    /**
     * update a user
     * Update a user
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit): Promise<GithubComSerbrodaDistanceChallengeModelsUser> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
